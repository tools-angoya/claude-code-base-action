name: Security Audit with Custom Mode

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: "0 2 * * 1"
  workflow_dispatch:
    inputs:
      audit_scope:
        description: "Audit scope"
        required: false
        default: "full"
        type: choice
        options:
          - full
          - critical
          - dependencies

jobs:
  security-audit:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run Security Audit with Custom Mode
        id: security-audit
        uses: tools-angoya/claude-code-base-action@main
        with:
          prompt: |
            Perform a comprehensive security audit of this codebase with the following scope: ${{ github.event.inputs.audit_scope || 'full' }}

            Focus areas:
            1. Authentication and authorization mechanisms
            2. Input validation and sanitization
            3. SQL injection and XSS vulnerabilities
            4. Insecure data storage and transmission
            5. Dependency vulnerabilities
            6. Configuration security
            7. Error handling and information disclosure

            Provide:
            - Detailed vulnerability assessment
            - Risk prioritization (Critical/High/Medium/Low)
            - Specific remediation steps
            - Code examples for secure implementations
            - Compliance considerations (OWASP Top 10)
          mode: "security-auditor"
          allowed_tools: "View,GlobTool,GrepTool,BatchTool,Bash(npm audit)"
          max_turns: "10"
          use_oauth: "true"
          claude_access_token: ${{ secrets.CLAUDE_ACCESS_TOKEN }}
          claude_refresh_token: ${{ secrets.CLAUDE_REFRESH_TOKEN }}
          claude_expires_at: ${{ secrets.CLAUDE_EXPIRES_AT }}

      - name: Parse Security Audit Results
        id: parse-results
        if: steps.security-audit.outputs.conclusion == 'success'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const executionFile = '${{ steps.security-audit.outputs.execution_file }}';
            const executionLog = JSON.parse(fs.readFileSync(executionFile, 'utf8'));

            let auditReport = '';
            let criticalIssues = 0;
            let highIssues = 0;

            for (let i = executionLog.length - 1; i >= 0; i--) {
              if (executionLog[i].role === 'assistant') {
                auditReport = executionLog[i].content;
                break;
              }
            }

            const criticalMatches = auditReport.match(/Critical/gi) || [];
            const highMatches = auditReport.match(/High/gi) || [];
            criticalIssues = criticalMatches.length;
            highIssues = highMatches.length;

            core.setOutput('audit_report', auditReport);
            core.setOutput('critical_issues', criticalIssues);
            core.setOutput('high_issues', highIssues);

            return {
              criticalIssues,
              highIssues,
              hasSecurityIssues: criticalIssues > 0 || highIssues > 0
            };

      - name: Create Security Report
        if: steps.security-audit.outputs.conclusion == 'success'
        run: |
          mkdir -p security-reports
          cat > security-reports/security-audit-$(date +%Y%m%d-%H%M%S).md << 'EOF'
          # Security Audit Report

          **Date**: $(date)
          **Scope**: ${{ github.event.inputs.audit_scope || 'full' }}
          **Commit**: ${{ github.sha }}
          **Branch**: ${{ github.ref_name }}

          ## Summary

          - Critical Issues: ${{ steps.parse-results.outputs.critical_issues }}
          - High Issues: ${{ steps.parse-results.outputs.high_issues }}

          ## Detailed Report

          ${{ steps.parse-results.outputs.audit_report }}

          ---
          *Generated by Claude Security Auditor*
          EOF

      - name: Upload Security Report
        if: steps.security-audit.outputs.conclusion == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-report-${{ github.run_number }}
          path: security-reports/
          retention-days: 30

      - name: Comment on PR
        if: github.event_name == 'pull_request' && steps.security-audit.outputs.conclusion == 'success'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const criticalIssues = parseInt('${{ steps.parse-results.outputs.critical_issues }}');
            const highIssues = parseInt('${{ steps.parse-results.outputs.high_issues }}');

            let emoji = '‚úÖ';
            let status = 'No critical security issues found';

            if (criticalIssues > 0) {
              emoji = 'üö®';
              status = `${criticalIssues} critical security issue(s) found`;
            } else if (highIssues > 0) {
              emoji = '‚ö†Ô∏è';
              status = `${highIssues} high-priority security issue(s) found`;
            }

            const comment = `## ${emoji} Security Audit Results

            **Status**: ${status}

            ### Summary
            - Critical Issues: ${criticalIssues}
            - High Issues: ${highIssues}

            <details>
            <summary>üìã Detailed Security Report</summary>

            \`\`\`
            ${{ steps.parse-results.outputs.audit_report }}
            \`\`\`

            </details>

            ${criticalIssues > 0 ? 'üö® **Action Required**: Please address critical security issues before merging.' : ''}

            *Generated by Claude Security Auditor Mode*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Fail on Critical Issues
        if: steps.parse-results.outputs.critical_issues > 0
        run: |
          echo "üö® Critical security issues found: ${{ steps.parse-results.outputs.critical_issues }}"
          echo "Please review and address these issues before proceeding."
          exit 1

      - name: Create Security Issue
        if: steps.parse-results.outputs.critical_issues > 0 && github.event_name != 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const title = `üö® Critical Security Issues Detected - ${new Date().toISOString().split('T')[0]}`;
            const body = `## Security Audit Alert

            Critical security issues have been detected in the codebase.

            **Details:**
            - Critical Issues: ${{ steps.parse-results.outputs.critical_issues }}
            - High Issues: ${{ steps.parse-results.outputs.high_issues }}
            - Commit: ${{ github.sha }}
            - Branch: ${{ github.ref_name }}

            **Report:**
            \`\`\`
            ${{ steps.parse-results.outputs.audit_report }}
            \`\`\`

            **Action Required:**
            Please review and address these security vulnerabilities immediately.

            *Auto-generated by Security Audit Workflow*`;

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'critical', 'bug']
            });

  dependency-audit:
    runs-on: ubuntu-latest
    if: github.event.inputs.audit_scope == 'dependencies' || github.event.inputs.audit_scope == 'full' || github.event.inputs.audit_scope == ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Audit Dependencies with Custom Mode
        uses: tools-angoya/claude-code-base-action@main
        with:
          prompt: |
            Analyze the dependency security of this project:

            1. Review package.json and lock files for known vulnerabilities
            2. Check for outdated dependencies with security patches
            3. Identify dependencies with high-risk licenses
            4. Suggest dependency updates and alternatives
            5. Provide npm audit analysis and recommendations

            Focus on actionable security improvements for the dependency chain.
          mode: "security-auditor"
          allowed_tools: "View,GlobTool,Bash(npm audit --audit-level=moderate),Bash(npm outdated)"
          use_oauth: "true"
          claude_access_token: ${{ secrets.CLAUDE_ACCESS_TOKEN }}
          claude_refresh_token: ${{ secrets.CLAUDE_REFRESH_TOKEN }}
          claude_expires_at: ${{ secrets.CLAUDE_EXPIRES_AT }}
